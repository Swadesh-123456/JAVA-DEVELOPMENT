import java.util.*;

class Course {
    String courseCode;
    String title;
    String description;
    int capacity;
    int enrolled;

    Course(String courseCode, String title, String description, int capacity) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.enrolled = 0;
    }

    boolean isAvailable() {
        return enrolled < capacity;
    }

    void enroll() {
        if (isAvailable()) {
            enrolled++;
        }
    }

    void drop() {
        if (enrolled > 0) {
            enrolled--;
        }
    }
}

class Student {
    String studentId;
    String name;
    List<Course> registeredCourses;

    Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    void registerCourse(Course course) {
        registeredCourses.add(course);
        course.enroll();
    }

    void dropCourse(Course course) {
        if (registeredCourses.remove(course)) {
            course.drop();
        } else {
            System.out.println("You are not registered for this course.");
        }
    }
}

public class CourseRegistrationSystem {
    private static final List<Course> courses = new ArrayList<>();
    private static final List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        initializeCourses();

        while (true) {
            System.out.println("\nCourse Registration System");
            System.out.println("1. Display Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. Drop a Course");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    displayCourses();
                    break;
                case 2:
                    registerForCourse(scanner);
                    break;
                case 3:
                    dropCourse(scanner);
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void initializeCourses() {
        courses.add(new Course("CS101", "Introduction to Computer Science", "Learn the basics of computer science.", 30));
        courses.add(new Course("CS102", "Data Structures", "Learn about data structures and algorithms.", 25));
        courses.add(new Course("CS103", "Database Systems", "Introduction to databases and SQL.", 20));
    }

    private static void displayCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses) {
            System.out.println("Course Code: " + course.courseCode);
            System.out.println("Title: " + course.title);
            System.out.println("Description: " + course.description);
            System.out.println("Capacity: " + course.capacity);
            System.out.println("Enrolled: " + course.enrolled);
            System.out.println("Available Slots: " + (course.capacity - course.enrolled));
            System.out.println();
        }
    }

    private static void registerForCourse(Scanner scanner) {
        System.out.print("Enter your Student ID: ");
        String studentId = scanner.nextLine();
        Student student = findStudent(studentId);
        if (student == null) {
            System.out.print("Enter your Name: ");
            String name = scanner.nextLine();
            student = new Student(studentId, name);
            students.add(student);
        }

        System.out.print("Enter the course code you want to register for: ");
        String courseCode = scanner.nextLine();
        Course course = findCourse(courseCode);

        if (course != null) {
            if (course.isAvailable()) {
                student.registerCourse(course);
                System.out.println("Successfully registered for " + course.title);
            } else {
                System.out.println("Course is full. Cannot register.");
            }
        } else {
            System.out.println("Course not found.");
        }
    }

    private static void dropCourse(Scanner scanner) {
        System.out.print("Enter your Student ID: ");
        String studentId = scanner.nextLine();
        Student student = findStudent(studentId);

        if (student != null && !student.registeredCourses.isEmpty()) {
            System.out.print("Enter the course code you want to drop: ");
            String courseCode = scanner.nextLine();
            Course course = findCourse(courseCode);

            if (course != null) {
                student.dropCourse(course);
                System.out.println("Successfully dropped " + course.title);
            } else {
                System.out.println("Course not found.");
            }
        } else {
            System.out.println("You are not registered in any courses.");
        }
    }

    private static Student findStudent(String studentId) {
        for (Student student : students) {
            if (student.studentId.equals(studentId)) {
                return student;
            }
        }
        return null;
    }

    private static Course findCourse(String courseCode) {
        for (Course course : courses) {
            if (course.courseCode.equals(courseCode)) {
                return course;
            }
        }
        return null;
    }
}

